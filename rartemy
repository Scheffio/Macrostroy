#!/usr/bin/env php
<?php

use MysqlCredentials\MysqlCredentials;
use Propel\Generator\Builder\Util\PropelTemplate;
use Propel\Generator\Command\InitCommand;
use Propel\Runtime\Adapter\AdapterFactory;
use Propel\Runtime\Connection\ConnectionFactory;
use Propel\Runtime\Connection\Exception\ConnectionException;

require "vendor/autoload.php";

const HOST = MysqlCredentials::HOST;
const DB_NAME = MysqlCredentials::DATABASE;
const USER = MysqlCredentials::USER;
const PASSWORD = MysqlCredentials::PASSWORD;
const POST = MysqlCredentials::PORT;
const CHARSET = MysqlCredentials::CHARSET;

class AutoInitCommand extends InitCommand
{
    public function init(): int
    {

        $options = [];
        $options['rdbms'] = "mysql";


        $connectionAttemptLimit = 10;
        $connectionAttemptCount = 0;
        do {
            if ($connectionAttemptCount >= $connectionAttemptLimit) {
                echo "Exceeded 10 attempts to connect to database\n";

                return 1;
            }
            $connectionAttemptCount += 1;
            $options['dsn'] = $this->initMysql();

            $options['user'] = USER;
            $options['password'] = PASSWORD;

            $options['charset'] = CHARSET;
        } while (!$this->testConnection($options));

        $isReverseEngineerRequested = true;

        $options['schemaDir'] = __DIR__;
        $options['phpDir'] = __DIR__ . "/Model/";
        $options['namespace'] = "DB";


        if ($isReverseEngineerRequested) {
            $options['schema'] = $this->reverseEngineerSchema($options);
        }

        $options['format'] = "php";


        $correct = true;

        if (!$correct) {
            echo "<error>Process aborted.</error>\n";

            return static::CODE_ERROR;
        }


        $this->generateProject($options);

        echo "Everything is up-to-date now :)\n";
        return static::CODE_SUCCESS;
    }

    private function initMysql(): string
    {
        $host = HOST;
        $port = POST;
        $database = DB_NAME;

        return sprintf('mysql:host=%s;port=%s;dbname=%s', $host, $port, $database);
    }

    private function testConnection(array $options): bool
    {
        $adapter = AdapterFactory::create($options['rdbms']);

        try {
            ConnectionFactory::create($options, $adapter);

            echo "Fuck yeah! Connection to sql server " . HOST . " is successful!\n";

            return true;
        } catch (ConnectionException $e) {
            // get the "real" wrapped exception message
            do {
                $message = $e->getMessage();
            } while (($e = $e->getPrevious()) !== null);

            echo "'Unable to connect to the specific sql server: ' . $message, 'error'\n";
            echo "'Make sure the specified credentials are correct and try it again.'\n";

            return false;
        }
    }

    private function reverseEngineerSchema(array $options): string
    {
        $outputDir = sys_get_temp_dir();

//        $this->getApplication()->setAutoExit(false);
        $fullDsn = sprintf('%s;user=%s;password=%s', $options['dsn'], urlencode($options['user']), urlencode($options['password']));

        $sh = shell_exec("./propel reverse --output-dir $outputDir --namespace {$options['namespace']} \"$fullDsn\"");
        if (is_null($sh)) throw new Exception("command not executed");
        $schema = file_get_contents($outputDir . '/schema.xml');

//        $this->getApplication()->setAutoExit(true);

        return $schema;
    }

    private function generateProject(array $options): void
    {
        $templatesPath = realpath(__DIR__ . "/vendor/propel/propel/templates/");
        if (!is_dir($templatesPath)) {
            throw new RuntimeException(sprintf('Cannot find templates path `%s`', $templatesPath));
        }

        $schema = new PropelTemplate();
        $schema->setTemplateFile($templatesPath . '/Command/schema.xml.php');
        $config = new PropelTemplate();
        $config->setTemplateFile($templatesPath . '/Command/propel.' . $options['format'] . '.php');

        $distConfig = new PropelTemplate();
        $distConfig->setTemplateFile($templatesPath . '/Command/propel.' . $options['format'] . '.dist.php');

        if (!isset($options['schema'])) {
            $options['schema'] = $schema->render($options);
        }

        $this->writeFile(sprintf('%s/schema.xml', $options['schemaDir']), $options['schema']);
        $this->writeFile(sprintf('%s/propel.%s', getcwd(), $options['format']), $config->render($options));
        $this->writeFile(sprintf('%s/propel.%s.dist', getcwd(), $options['format']), $distConfig->render($options));

        $this->buildSqlAndModelsAndConvertConfig();
    }

    private function writeFile(string $filename, string $content): void
    {
        $this->getFilesystem()->dumpFile($filename, $content);
    }

    private function buildSqlAndModelsAndConvertConfig(): void
    {
        shell_exec("./propel sql:build");
        shell_exec("./propel model:build");
        shell_exec("./propel config:convert");
    }
}

echo "\n\n";
if (!isset($argv)) {
    $argv = [];
    $argv[1] = "update";
}

switch ($argv[1]) {
    case "update":
    case "propel":
    case "updatepropel":
    case "update-propel":
    case "update_propel":
    case "propelupdate":
    case "propel-update":
    case "propel_update":
    case "up":
    case "pu":
        delete_directory("generated-conf");
        delete_directory("generated-sql");
        delete_directory("Model");
        delete_file("propel");
        delete_file("propel.php");
        delete_file("propel.php.dist");
        delete_file("schema.xml");

        shell_exec('composer remove propel/propel -q');
        shell_exec("composer require \"propel/propel: ~2.0@dev\" -q");
        shell_exec("ln -s vendor/bin/propel propel");

        (new AutoInitCommand())->init();
        break;

}
echo "\n\nDo not forget to thank Artemy!\n\n";


function delete_directory($dirname)
{
    $dir_handle = false;
    if (is_dir($dirname)) {
        $dir_handle = opendir($dirname);
    }

    if (!$dir_handle) {
        return false;
    }

    while ($file = readdir($dir_handle)) {
        if ($file != "." && $file != "..") {
            if (!is_dir($dirname . "/" . $file)) {
                unlink($dirname . "/" . $file);
            } else {
                delete_directory($dirname . '/' . $file);
            }
        }
    }
    closedir($dir_handle);
    rmdir($dirname);
    return true;
}

function delete_file($filename)
{
    if (is_file($filename)) {
        unlink($filename);
    }
}